import { NextRequest, NextResponse } from 'next/server';
import { ChatGoogleGenerativeAI } from '@langchain/google-genai';
import { HumanMessage, SystemMessage, AIMessage } from '@langchain/core/messages';
import { StringOutputParser } from '@langchain/core/output_parsers';
import { writeFile, mkdir } from 'fs/promises';
import path from 'path';
import { existsSync } from 'fs';

const model = new ChatGoogleGenerativeAI({
  model: 'gemini-2.0-flash',
  temperature: 0.7,
  apiKey: process.env.GOOGLE_API_KEY,
});

const outputParser = new StringOutputParser();

const SYSTEM_PROMPT = `You are KOGA AI, an expert at generating Figma plugin code from user descriptions.

When generating code:
1. Write clean, working TypeScript code for Figma plugins
2. Use proper Figma API methods: figma.createFrame(), figma.createText(), etc.
3. Include proper error handling
4. Make code that runs in the Figma plugin context

Format your response as:
- First, provide a brief explanation of what the code does
- Then, wrap the code in triple backticks with typescript language tag

Example:
\`\`\`typescript
// Create a red rectangle
const rect = figma.createRectangle();
rect.fills = [{ type: 'SOLID', color: { r: 1, g: 0, b: 0 } }];
rect.resize(100, 100);
figma.currentPage.appendChild(rect);
\`\`\`

Do NOT include figma.showUI() or figma.closePlugin() in your code - these are handled by the plugin wrapper.`;

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { message, history } = body;

    if (!message || typeof message !== 'string') {
      return NextResponse.json({ 
        success: false, 
        error: 'Message is required and must be a string' 
      }, { status: 400 });
    }

    if (!process.env.GOOGLE_API_KEY) {
      return NextResponse.json({ 
        success: false, 
        error: 'Google API key is not configured' 
      }, { status: 500 });
    }

    // Build message history
    const messages = [
      new SystemMessage(SYSTEM_PROMPT),
      ...(Array.isArray(history) ? history : []).map((msg: any) => {
        if (msg.role === 'user') {
          return new HumanMessage(msg.content);
        } else {
          return new AIMessage(msg.content);
        }
      }),
      new HumanMessage(message),
    ];

    const chain = model.pipe(outputParser);
    const response = await chain.invoke(messages);

    // Ensure response is a string
    if (typeof response !== 'string') {
      throw new Error('Invalid response from AI model');
    }

    // Extract code from response
    const codeMatch = response.match(/```typescript\n([\s\S]*?)```/) || 
                     response.match(/```javascript\n([\s\S]*?)```/) ||
                     response.match(/```\n([\s\S]*?)```/);
    
    let extractedCode = '';
    if (codeMatch && codeMatch[1]) {
      extractedCode = codeMatch[1].trim();
    }

    // Create plugin code wrapper
    const pluginCode = `/// <reference types="@figma/plugin-typings" />

// Plugin generated by KOGA AI
figma.showUI(__html__, { visible: false });

figma.ui.onmessage = async (msg) => {
  if (msg.type === 'run-code') {
    try {
      // Generated code starts here
      ${extractedCode || '// No code extracted from response'}
      
      // Select all created nodes
      const nodes = figma.currentPage.selection;
      if (nodes.length > 0) {
        figma.viewport.scrollAndZoomIntoView(nodes);
      }
      
      figma.closePlugin("Code executed successfully!");
    } catch (error) {
      console.error('Plugin error:', error);
      figma.closePlugin("Error: " + error.message);
    }
  }
};
`;

    // Ensure plugin directory exists
    const pluginDir = path.join(process.cwd(), 'plugin');
    if (!existsSync(pluginDir)) {
      await mkdir(pluginDir, { recursive: true });
    }

    // Write to code.ts file
    const filePath = path.join(pluginDir, 'code.ts');
    await writeFile(filePath, pluginCode.trim(), 'utf8');

    return NextResponse.json({ 
      success: true, 
      response: response || 'Code generated successfully',
      message: response || 'Code generated successfully',
      filePath: filePath,
      codeGenerated: !!extractedCode
    });

  } catch (error: any) {
    console.error('API Error:', error);
    return NextResponse.json({ 
      success: false, 
      error: error.message || 'Failed to generate plugin code' 
    }, { status: 500 });
  }
}